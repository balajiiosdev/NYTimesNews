@startuml HLD
title New York Times Detailed Class diagram

hide empty members

package NewsApi {
    enum HTTPMethod {
        case get
        case post
        case put
        case patch
        case delete
    }

    interface DataRequest {
        associatedtype Response

        +url: String
        +method: HTTPMethod
        +headers: [String : String]
        +queryItems: [String : String]

        +decode(data: Data): Response
    }

    interface NetworkServiceProtocol {
        ~request<Request: DataRequest>(request: Request, completion: (Result<Request.Response, Error>):Void):Void
    }

    class NetworkService {
        ~init(urlSession: URLSession)
    }

    class TopNewsRequest {
        +response: TopNewsResponse
        +init(section: Section)
    }

    class TopNewsResponse {
        +status: String
        +copyright: String
        +section: String
        +lastUpdated: String
        +numOfResults: Int
        +results: Article[*]
    }

    interface NewsApiService {
        fetchTopNews(section: Section, completion: (Result<TopNewsResponse, Error>):Void):Void
    }

    class NewsApiServiceProvider {
        -networkService: NetworkServiceProtocol
        ~init(networkService: NetworkServiceProtocol)
        +init()
    }

    class Article {
        +section: String
        +subsection: String
        +title: String
        +abstract: String
        +url: String
        +uri: String
        +byline: String
        +item_type: String
        +updated_date: String
        +created_date: String
        +published_date: String
        +material_type_facet: String
        +kicker: String
        +short_url: String
        +desFacet: String[*]
        +orgFacet: String[*]
        +perFacet: String[*]
        +geoFacet: String[*]
        +multimediaItems: MultiMediaItem[*]
    }

    class MultiMediaItem {
        +url: String
        +format: String
        +height: Int
        +width: Int
        +type: String
        +subtype: String
        +caption: String
        +copyright: String
    }

    enum Section {
        case home
        case arts
        case automobiles
        case books
        case business
        case fashion
        case food
        case health
        case insider
        case magazine
        case movies
        case nyregion
        case obituaries
        case opinion
        case politics
        case realestate
        case science
        case sports
        case sundayreview
        case technology
        case theater
        case tMagazine
        case travel
        case upshot
        case us
        case world
    }

    Article *--> "*" MultiMediaItem
    DataRequest <|.. TopNewsRequest
    DataRequest *--> HTTPMethod
    TopNewsRequest *--> "0..1" TopNewsResponse
    TopNewsRequest o--> "uses" Section
    TopNewsResponse *--> "0..*" Article
    NetworkServiceProtocol <|.. NetworkService
    NetworkService o-down-> "uses" URLSession
    NewsApiService <|.. NewsApiServiceProvider
    NewsApiServiceProvider *--> "1" NetworkServiceProtocol
    NewsApiServiceProvider --> TopNewsRequest
}

package Application {
    package NewsList {
        namespace NewsListModels {
            namespace TopNews {
                class Request {
                    +section: Section
                }
                class Response {
                    +topNews: TopNewsResponse
                }
                class ViewModel {
                    +articles: ArticleModel[*]
                    +copyright: String
                    +lastUpdated: String
                }
                class ArticleModel {
                    +title: String
                    +author: String
                    +thumbnail: MediaItem
                }

                class MediaItem {
                    +url: URL
                }
            }
        }
        class NewsListViewController {
            +interactor: NewsListBusinessLogic
            +router: NewsListRoutingLogic
            -viewModel: NewsListModels.TopNews.ViewModel
            -tableView: UITableView
            +init(section: Section):Void
        }

        class NewsTableViewCell {
            -image: UIImage
            -titleLabel: UILabel
            -authorLabel: UILabel
            +prepareCell(article: Article)
        }

        interface NewsListDisplayLogic {
            +displayTopNews(viewModel: NewsListModels.TopNews.ViewModel):Void
            +displayErrorAlert(title: String, message: String):Void
            +displayToast(message: String): Void
        }
        interface NewsListDataStore {
            +articles: Article[*]
        }
        interface NewsListBusinessLogic {
            +fetchTopNews(request: NewsListModels.TopNews.Request):Void
        }

        class NewsListInteractor {
            +presenter: NewsListPresentationLogic
            +init(newsApiService: NewsApiService)
        }

        interface NewsListPresentationLogic {
            +presentTopNews(response: NewsList.TopNews.Response):Void
            +presentError(error: Error):Void
        }

        class NewsListPresenter {
            +{weak}view: NewsListDisplayLogic?
        }

        interface NewsListRoutingLogic {
            +routeToNewsDetailView(index: Int)
        }

        interface NewsListDataPassing {
            +dataStore: NewsListDataStore
        }

        class NewsListRouter {
            +{weak}viewController: UIViewController
        }

    }

    package NewsDetail {

        namespace NewsDetailsModels {
            class Request {
            }
            class Response {
                +article: Article
            }
            class ViewModel {
                +articleDetails: ArticleDetailModel
            }
            class ArticleDetailModel {
                +title: String
                +author: String
                +description: String
                +jumboImage: MediaItem?
            }
        }

        class NewsDetailViewController {
            +interactor: NewsDetailBusinessLogic
            +router: NewsDetailsRoutingLogic
        }

        interface NewsDetailDisplayLogic {
            +displayNewsDetails(viewModel: NewsDetail.ViewModel):Void
        }

        interface NewsDetailBusinessLogic {
            +fetchNewsDetails(request: NewsDetailModels.Request):VVoid
        }

        interface NewsDetailDataStore {
            +article: Article
        }

        class NewsDetailsInteractor {
            +presenter: NewsDetailPresentationLogic
            -article: Article
            +init(articles: Article)
        }

        interface NewsDetailPresentationLogic {
            +presentNewsDetails(response: NewsDetail.Response)
        }

        class NewsDetailsPresenter {
            +{weak}view: NewsDetailDisplayLogic?
        }

        interface NewsDetailsRoutingLogic {
            +routeToWebView():Void
        }

        class NewsDetailsRouter {
            +{weak}viewController: UIViewController?
            +dataStore: NewsDetailDataStore
        }

        NewsDetailBusinessLogic <|.. NewsDetailsInteractor
        NewsDetailViewController *--> NewsDetailBusinessLogic
        NewsDetailViewController *--> NewsDetailsRoutingLogic
        NewsDetailDisplayLogic <|.. NewsDetailViewController
        NewsDetailPresentationLogic <|.. NewsDetailsPresenter
        NewsDetailsInteractor *--> NewsDetailPresentationLogic
        NewsDetailsPresenter ...> "weak" NewsDetailDisplayLogic
        NewsDetailsPresenter "creates" -->  NewsDetailsModels.ViewModel
        NewsDetailDataStore <|.. NewsDetailsInteractor
        NewsDetailsRoutingLogic <|.. NewsDetailsRouter
        NewsDetailsRouter "weak"...>  NewsDetailViewController
        NewsDetailsRouter --> SFSafariViewController
    }
}

NewsListBusinessLogic <|.up. NewsListInteractor
NewsListDataStore <|.. NewsListInteractor
NewsListViewController *-up-> NewsListBusinessLogic
NewsListDisplayLogic <|.. NewsListViewController
NewsListPresentationLogic <|.. NewsListPresenter

NewsListInteractor *-> NewsListPresentationLogic
NewsListPresenter ..> "weak" NewsListDisplayLogic
NewsListViewController *-> NewsListRoutingLogic
NewsListRouter ...> "weak" NewsListViewController
NewsListViewController -left-> NewsTableViewCell
NewsListRoutingLogic <|.. NewsListRouter
NewsListDataPassing <|.up. NewsListRouter
NewsListRouter --> NewsDetailViewController
NewsListInteractor *--> NewsApiService
NewsListModels.TopNews.Request --> Section
NewsListModels.TopNews.Response --> TopNewsResponse
NewsListModels.TopNews.ViewModel *--> "0..*" NewsListModels.TopNews.ArticleModel
NewsListModels.TopNews.ArticleModel *--> NewsListModels.TopNews.MediaItem
NewsListViewController *--> NewsListModels.TopNews.ViewModel
NewsListViewController ..> NewsListModels.TopNews.Request
NewsListInteractor ..>  NewsListModels.TopNews.Response

NewsDetailsModels.Response *--> Article
NewsDetailsModels.ViewModel *--> NewsDetailsModels.ArticleDetailModel
NewsDetailViewController *--> NewsDetailsModels.ViewModel
NewsDetailViewController ..> "uses" NewsDetailsModels.Request
NewsDetailsInteractor -->  NewsDetailsModels.Response


@enduml